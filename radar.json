[
  {
    "name": "Web 3.0",
    "ring": "Research",
    "quadrant": "Data Futures",
    "isNew": "TRUE",
    "description": "<h1>ET Comments</h1><p>The decentralized Web or Web 3.0 is the next generation of Internet technology that aims to create more open, connected, and intelligent websites and web applications, which focus on using a machine-based understanding of data. It would leverage peer-to-peer (P2P) technologies like blockchain, open-source software, virtual reality, the Internet of Things (IoT), and more. It also aims to make the Internet more open and decentralized. In the current framework, users have to rely on network and cellular providers that surveil the information going through their systems. With the advent of distributed ledger technologies, that soon might change, and users could take back ownership of their data, Since middlemen are removed from the equation, user data will no longer be controlled by them. This reduces the risk of censorship by governments or corporations and cuts down the effectiveness of Denial-of-Service (DoS) attacks. The evolution of the Internet has been a long journey and will surely continue towards further iterations. With the massive explosion of available data, websites, and applications have the ability to transition to a web that provides a considerably better experience to an increasing number of users around the world. Web3 is the next stage of the web evolution that would make the internet more intelligent or process information with near-human-like intelligence through the power of AI systems that could run smart programs to assist users. While there is no concrete definition for Decentralized Web or Web 3.0 yet, it is already set in motion by innovations in other technological fields.</p><h1>TechnoVision Container</h1><h2>Innovation Theater Assets</h2><ul><li>Here we will be linking assets to Innovation Theater Portal</li><li>Here we will be linking assets to Innovation Theater Portal</li><li>Here we will be linking assets to Innovation Theater Portal</li><li>Here we will be linking assets to Innovation Theater Portal</li></ul><h2>Ecosystem/Startups</h2><p>Startups Catalyst Report, ED Intelligence, One liner taling about </p><h2>Related Technologies</h2><OL><li>Blockchain</li><li>Platform</li><li>Metaverse</li><li>Tokenization</li><li>Digital Assets</li><li>Virtual Reality</li></OL><h1>Analyst Opinions</h1><h2>Key Publications</h2><ul><li>Web 3.0 in-financial-services-podcast-the-metaverse (Internal CRI Reports)</li><li>Web 3.0 market report (External Gartner, Hyperscaler)</li></ul>"
  },
  {
    "name": "Capgemin 2",
    "ring": "Research",
    "quadrant": "AI Futures",
    "isNew": "TRUE",
    "description": "<p><strong><a href=\"https://github.com/dragonflydb/dragonfly\">Dragonfly</a></strong> is a new in-memory data store with compatible <a href=\"/radar/platforms/redis\">Redis</a> and Memcached APIs. It leverages the new Linux-specific <a href=\"https://github.com/axboe/liburing\">io_uring</a> API for I/O and implements <a href=\"https://dragonflydb.io/blog/2022/06/23/cache_design/\">novel algorithms and data structures</a> on top of a multithreaded, shared-nothing architecture. Because of these clever choices in implementation, Dragonfly achieves impressive results in performance. Although Redis continues to be our default choice for in-memory data store solutions, we do think Dragonfly is an interesting choice to assess.</p>"
  },
  {
    "name": "Capgemin 3",
    "ring": "Research",
    "quadrant": "Immersive Futures",
    "isNew": "TRUE",
    "description": "<p><strong><a href=\"https://github.com/dragonflydb/dragonfly\">Dragonfly</a></strong> is a new in-memory data store with compatible <a href=\"/radar/platforms/redis\">Redis</a> and Memcached APIs. It leverages the new Linux-specific <a href=\"https://github.com/axboe/liburing\">io_uring</a> API for I/O and implements <a href=\"https://dragonflydb.io/blog/2022/06/23/cache_design/\">novel algorithms and data structures</a> on top of a multithreaded, shared-nothing architecture. Because of these clever choices in implementation, Dragonfly achieves impressive results in performance. Although Redis continues to be our default choice for in-memory data store solutions, we do think Dragonfly is an interesting choice to assess.</p>"
  },
  {
    "name": "Capgemin 4",
    "ring": "Research",
    "quadrant": "Security Futures",
    "isNew": "TRUE",
    "description": "<p><strong><a href=\"https://github.com/dragonflydb/dragonfly\">Dragonfly</a></strong> is a new in-memory data store with compatible <a href=\"/radar/platforms/redis\">Redis</a> and Memcached APIs. It leverages the new Linux-specific <a href=\"https://github.com/axboe/liburing\">io_uring</a> API for I/O and implements <a href=\"https://dragonflydb.io/blog/2022/06/23/cache_design/\">novel algorithms and data structures</a> on top of a multithreaded, shared-nothing architecture. Because of these clever choices in implementation, Dragonfly achieves impressive results in performance. Although Redis continues to be our default choice for in-memory data store solutions, we do think Dragonfly is an interesting choice to assess.</p>"
  },
  {
    "name": "Capgemin AIE",
    "ring": "Research",
    "quadrant": "Data Futures",
    "isNew": "TRUE",
    "description": "<ol><li>Hyderabad</li><li>Mumbai</li></ol>"
  },
  {
    "name": "Capgemin 6",
    "ring": "Research",
    "quadrant": "Connected Futures",
    "isNew": "TRUE",
    "description": "<p><strong><a href=\"https://github.com/dragonflydb/dragonfly\">Dragonfly</a></strong> is a new in-memory data store with compatible <a href=\"/radar/platforms/redis\">Redis</a> and Memcached APIs. It leverages the new Linux-specific <a href=\"https://github.com/axboe/liburing\">io_uring</a> API for I/O and implements <a href=\"https://dragonflydb.io/blog/2022/06/23/cache_design/\">novel algorithms and data structures</a> on top of a multithreaded, shared-nothing architecture. Because of these clever choices in implementation, Dragonfly achieves impressive results in performance. Although Redis continues to be our default choice for in-memory data store solutions, we do think Dragonfly is an interesting choice to assess.</p>"
  },
  {
    "name": "Capgemin 7",
    "ring": "Research",
    "quadrant": "Quantum Computing Futures",
    "isNew": "TRUE",
    "description": "<p><strong><a href=\"https://github.com/dragonflydb/dragonfly\">Dragonfly</a></strong> is a new in-memory data store with compatible <a href=\"/radar/platforms/redis\">Redis</a> and Memcached APIs. It leverages the new Linux-specific <a href=\"https://github.com/axboe/liburing\">io_uring</a> API for I/O and implements <a href=\"https://dragonflydb.io/blog/2022/06/23/cache_design/\">novel algorithms and data structures</a> on top of a multithreaded, shared-nothing architecture. Because of these clever choices in implementation, Dragonfly achieves impressive results in performance. Although Redis continues to be our default choice for in-memory data store solutions, we do think Dragonfly is an interesting choice to assess.</p>"
  },
  {
    "name": "Capgemin 8",
    "ring": "Scale",
    "quadrant": "Standards & Open Source Futures",
    "isNew": "TRUE",
    "description": "<p><strong><a href=\"https://github.com/dragonflydb/dragonfly\">Dragonfly</a></strong> is a new in-memory data store with compatible <a href=\"/radar/platforms/redis\">Redis</a> and Memcached APIs. It leverages the new Linux-specific <a href=\"https://github.com/axboe/liburing\">io_uring</a> API for I/O and implements <a href=\"https://dragonflydb.io/blog/2022/06/23/cache_design/\">novel algorithms and data structures</a> on top of a multithreaded, shared-nothing architecture. Because of these clever choices in implementation, Dragonfly achieves impressive results in performance. Although Redis continues to be our default choice for in-memory data store solutions, we do think Dragonfly is an interesting choice to assess.</p>"
  },
  {
    "name": "capgemini 9",
    "ring": "Innovate",
    "quadrant": "aied",
    "isNew": "TRUE",
    "description": "<p>When implementing robust, secure and reliable disaster recovery, it’s necessary to ensure that backups can't be deleted or altered before their expiry, either maliciously or accidentally. Previously, with AWS Backup, these policies and guarantees had to be implemented by hand. Recently, AWS has added the Vault Lock feature to ensure backups are immutable and untamperable. <a href=\"https://docs.aws.amazon.com/aws-backup/latest/devguide/vault-lock.html\"><strong>AWS Backup Vault Lock</strong></a> enforces retention and deletion policies and prevents even those with administrator privileges from altering or deleting backup files. This has proved to be a valuable addition and fills a previously empty space.</p>"
  },
  {
    "name": "capgemini 10",
    "ring": "Innova",
    "quadrant": "Data Futures",
    "isNew": "TRUE",
    "description": "<p>When implementing robust, secure and reliable disaster recovery, it’s necessary to ensure that backups can't be deleted or altered before their expiry, either maliciously or accidentally. Previously, with AWS Backup, these policies and guarantees had to be implemented by hand. Recently, AWS has added the Vault Lock feature to ensure backups are immutable and untamperable. <a href=\"https://docs.aws.amazon.com/aws-backup/latest/devguide/vault-lock.html\"><strong>AWS Backup Vault Lock</strong></a> enforces retention and deletion policies and prevents even those with administrator privileges from altering or deleting backup files. This has proved to be a valuable addition and fills a previously empty space.</p>"
  },
  {
    "name": "capgemini AIE",
    "ring": "Research",
    "quadrant": "Decentralized Futures",
    "isNew": "TRUE",
    "description": "<p>When implementing robust, secure and reliable disaster recovery, it’s necessary to ensure that backups can't be deleted or altered before their expiry, either maliciously or accidentally. Previously, with AWS Backup, these policies and guarantees had to be implemented by hand. Recently, AWS has added the Vault Lock feature to ensure backups are immutable and untamperable. <a href=\"https://docs.aws.amazon.com/aws-backup/latest/devguide/vault-lock.html\"><strong>AWS Backup Vault Lock</strong></a> enforces retention and deletion policies and prevents even those with administrator privileges from altering or deleting backup files. This has proved to be a valuable addition and fills a previously empty space.</p>"
  }
]
